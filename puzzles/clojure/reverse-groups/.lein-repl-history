(require 'reverse-groups.core :reload)
(-main)
concat
(concat '(a b d) '(d e))
rev
reverse
(require 'reverse-groups.core :reload)
(-main)
(require 'reverse-groups.core :reload)
(-main)
exit
(read-string "22")
exit
(require '[clojure.string :as str])
(str/split "1,2,3,4,5;2"  #";")
(first (str/split "1,2,3,4,5;2"  #";"))
(str/split (first (str/split "1,2,3,4,5;2"  #";")) #",")
(second (str/split "1,2,3,4,5;2"  #";"))
exit
(require '[clojure.string :as str])
(defn parse-prob [prob-string]
  (let [parts (str/split prob-string #";")
        ;no (print parts)
        elts (str/split (first parts) #",")]
    (list elts (read-string (second parts)))))
 (parse-prob "1,2,3,4,5;2")
exit
(require 'reverse-groups.core :reload)
(solve "1,2,3,4,5;2")
(require 'reverse-groups.core :reload)
(rev-group '(1 2 3 4 5) 2)
(require 'reverse-groups.core :reload)
(solve "1,2,3,4,5;2")
exit
(do (println 3) (println 4))
exit
(require 'reverse-groups.core :reload)
(rev-group '(a b c d e f g))
(rev-group '(a b c d e f g) 2)
(rev-group '(a b c d e f g h) 2)
exit
